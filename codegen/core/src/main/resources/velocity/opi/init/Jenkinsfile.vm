#set( $symbol_dollar = '$' )
@Library(['com.optum.jenkins.pipeline.library@v0.1.24', 'opi-library@v1.0']) _

pipeline {
  agent {
    label 'docker-maven-slave'
  }
  environment {
    GIT_SONAR_TOKEN = 'sonar-github'
    CREDS_ID = 'user-creds'
    JWT_CREDENTIALS = 'jwt-creds'

    PAAS_SERVER = '${paas_server}'
    PAAS_PROJECT = '${paas_project}'
    PAAS_APP = '${originalAppName}'
    FRIENDLY_URL = '${friendly_url}'

    DOCKER_IMAGE = 'docker.optum.com/${projectOwner}/${paas_project}:dev'
  }

  stages {
    stage ('Build') {
      steps {
        glMavenBuild additionalProps:['ci.env':'']
      }
    }
    stage('Sonar') {
      steps {
        glSonarMavenScan gitUserCredentialsId:"${env.GIT_SONAR_TOKEN}"
      }
    }
    stage('Build Docker Image') {
      steps {
        glDockerImageBuildPush tag: "$env.DOCKER_IMAGE", dockerCredentialsId: "$env.CREDS_ID"
      }
    }
    stage('Deploy') {
      steps {
        glOpenshiftDeleteServiceResources credentials: "$env.CREDS_ID", ocpUrl: "$env.PAAS_SERVER", project: "$env.PAAS_PROJECT", serviceName: "$env.PAAS_APP"
        glOpenshiftDeploy credentials: "$env.CREDS_ID", ocpUrl: "$env.PAAS_SERVER", project: "$env.PAAS_PROJECT", serviceName: "$env.PAAS_APP", dockerImage: "$env.DOCKER_IMAGE", port: '8080'
      }
    }
    stage('Publish to OPI Catalog') {
      steps {
        glCatalogPublish jwtCredentialsId:"$env.JWT_CREDENTIALS"
      }
    }
  }
}
