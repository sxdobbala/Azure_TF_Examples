#!/usr/bin/env groovy

#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )

@Library("com.optum.jenkins.pipeline.library@v0.1.23") _

import com.optum.jenkins.pipeline.library.openshift.OpenShift
import com.optum.jenkins.pipeline.library.sonar.Sonar


/**
Jenkins Global Library
-----------
This project makes use of Optum's shared global library.


Plugins Setup
-----------
Jenkins -> Manage Jenkins -> Manage Plugins

Aside from the plugins already included in the CIS configured Jenkins instances, the following plugins must be set up:

Credentials Binding Plugin: https://plugins.jenkins.io/credentials-binding
Version: 1.10 or higher

Credentials Plugin: https://plugins.jenkins.io/credentials
Version: 2.1.12 or higher

Credentials will need to be added to sign into DTR and OpenShift.


Nodes Setup
-----------
Jenkins -> Manage Jenkins -> Configure System -> Cloud -> Docker -> Images
Set up Docker Templates as follows:

---
Docker Image:   docker.optum.com/optum/jenkins_slave
Volumes:        /data/maven:/home/jenkins/.m2
Volumes From:   java
                maven
                docker
                oc
Labels:         docker-maven-slave
---
*/



pipeline {
    agent none
    environment {
        CREDS_ID = 'id-for-access'
        GITHUB_REPO_BRANCH = 'master'
        PAAS_SERVER = '${paas_server}'
        PAAS_PROJECT = '${paas_project}'
        PAAS_APP = '${originalAppName}'
        FRIENDLY_URL = '${friendly_url}'
        DOCKER_IMAGE = 'docker.optum.com/${projectOwner}/${paas_project}:${originalAppName}'
        DEVOPS_METRICS_ENABLED = true
        FORTIFY_APP_NAME = '${appName}'
    }
    stages {
        stage('Checkout SCM') {
            agent { label 'docker-maven-slave'}
            steps {
                script {

                stage('Maven Build') {
                    glMavenBuild additionalProps: ['ci.env': '']
                }

                stage('Build and Push Docker Image') {
                    glDockerImageBuildPush tag: "$env.DOCKER_IMAGE", dockerCredentialsId: "$env.CREDS_ID"
                }

                stage('Deploy Image') {
                    ${deploy}
                }

                ${sonar}

		        }
            }
        }

        ${fortify}

        ${arachni}
	}

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if successful'
        }
        failure {
            echo 'This will run only if failed'
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the pipeline has changed'
            echo 'For example, if the pipeline was previously failing but is now successful'
        }
    }
}

