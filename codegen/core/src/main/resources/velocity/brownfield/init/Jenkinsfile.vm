#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _ //The global pipeline library for useful functions.

import com.optum.jenkins.pipeline.library.openshift.OpenShift
import com.optum.jenkins.pipeline.library.sonar.Sonar


/**
Jenkins Global Library
-----------
This project makes use of Optum's shared global library.
Plugins Setup
-----------
Jenkins -> Manage Jenkins -> Manage Plugins
Aside from the plugins already included in the CIS configured Jenkins instances, the following plugins must be set up:
Credentials Binding Plugin: https://plugins.jenkins.io/credentials-binding
Version: 1.10 or higher
Credentials Plugin: https://plugins.jenkins.io/credentials
Version: 2.1.12 or higher
Credentials will need to be added to sign into DTR and OpenShift.
Nodes Setup
-----------
Jenkins -> Manage Jenkins -> Configure System -> Cloud -> Docker -> Images
Set up Docker Templates as follows:
---
Docker Image:   docker.optum.com/optum/jenkins_slave
Volumes:        /data/maven:/home/jenkins/.m2
Volumes From:   java
                maven
                docker
                oc
Labels:         docker-maven-slave
---
*/



pipeline {
    agent { 
    	label 'docker-maven-slave'
    }
    environment {
        ARTIFACTORY_PUBLISH_CREDS = 'id-for-access'
        GITHUB_REPO_BRANCH = 'master'
        GITHUB_CREDS_ID = 'id-for-access'
        REPO_URL = '${github_url}'
        ARTIFACTORY_URL = 'http://repo1.uhc.com/artifactory'
		OSE_PORT = '8080'
		DOCKERTAG = 'LATEST'
        
        OPENSHIFT_CREDS_ID = 'id-for-access'
        OPENSHIFT_URL = '${ose_server}'
        OPENSHIFT_PROJECT = '${ose_project}'
        OPENSHIFT_APP = "${originalAppName}"
		JAR_LOCATION = "${PAAS_PROJECT}-web/target/ROOT.jar"
    
    }
    
stages {
        stage('Checkout SCM') {
	   		agent { label 'docker-maven-slave'}
	   	steps {
	    	script {

	     stage('Maven Build') {
			echo "==============================================================================================="
		    echo "======================================== Starting Build ======================================="
	        echo "==============================================================================================="
			git branch: env.GITHUB_REPO_BRANCH, credentialsId: GITHUB_CRED_ID, url: REPO_URL
		    
            glMavenBuild mavenGoals:'clean install', skipTests:true
	     }
	     stage('Define Image') {
			echo "======================================================================================================"
	        echo "============================================= Define Image   ========================================="
            echo "======================================================================================================"    			
			echo "Running with $env.JAR_LOCATION"

			//Make sure there is no Dockerfile in the workspace, sometimes happens with Jenkins slaves.
			sh "rm Dockerfile || true"
			sh "echo 'FROM docker.optum.com/cloudscaffolding/alpine-java:latest' >> Dockerfile"
			sh "echo 'COPY $env.JAR_LOCATION /opt/optum/app.jar' >> Dockerfile"
			sh "cat Dockerfile"
		}
	     

	     stage('Build and Push Docker Image') {
		 echo "==================================================================================================="
		 echo "======================================= Pushing to Docker ========================================="
		 echo "==================================================================================================="
                 glDockerImageBuildPush tag: "docker.optum.com/kfareg/$PAAS_APP:$DOCKERTAG", dockerCredentialsId: "$env.CREDS_ID"
            }
		  }
		}
	}
	stage('Deploy Image') {
    	environment {
            DOCKER_IMAGE_LINK = "docker.optum.com/${OSE_USER}/$PAAS_APP:$DOCKERTAG"
        }
	  steps {
		echo "===================================================================================================="
	    echo "====================================== Deploying Image to OSE ======================================"
        echo "===================================================================================================="
		     
	     glOpenshiftDeploy credentials: OPENSHIFT_ID,
		  dockerImage: DOCKER_IMAGE_LINK,
		  project: OPENSHIFT_PROJECT,
		  ocpUrl: OPENSHIFT_URL,
		  port: OSE_PORT,
		  serviceName: OPENSHIFT_APP

	   }
	}
}
	
post {
    always {
      echo 'This will always run'
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}