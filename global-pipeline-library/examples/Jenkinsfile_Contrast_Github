#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _

// This is an example Jenkinsfile where we build and then execute a Contrast Scan
// The Jenkins Global Pipeline Library that is being used is https://github.optum.com/jenkins-pipelines/global-pipeline-library

pipeline {
  agent  {
    label 'docker-maven-slave'
  }

  stages {
    stage ('Build') {
      steps {
        glMavenBuild javaVersion:"1.7.0",
                     additionalProps:['MAVEN_OPTS':'-Xms1024m -Xms1024m']
      }
    }

    // NOTES:
    // (1) The glContrastPullMetrics requires that your application has
    //     already run applicable unit/automated tests as part of your
    //     Jenkins pipeline. Additionally, your application should be
    //     running those tests with Contrast instrumentation enabled.
    // (2) The credential type that the credentialId relates to must be "SecretText"
    //     SecretText value is entered as apiUsername [space] apiKey [space] serviceKey
    //     Information on Contrast API Keys can be found here: 
    //     https://optum.contrastsecurity.com/Contrast/static-secure/docs/restapi/index.html#accessingTheApi        
    // (3) Like the contrastVerification method, glContrastPullMetrics determines the
    //     application, as identified on Contrast, name based on the Jenkins JOB_BASE_NAME.
    stage('Optum DevOps Metrics') {
      steps {
        glContrastPullMetrics credentialIdForApiKeys:'your-contrast-api-keys', 
                              buildId: "unit_test" // In normal use, omit this parameter as the build number will be determined by Jenkins
      }
    }

    // **Optional: Use contrast pipeline method to determine
    //             if build should fail - given the criteria
    // 
    // Contrast Jenkins Plugin Information: https://jenkins.io/doc/pipeline/steps/contrast-continuous-application-security/
    //  
    stage('Contrast Verification') {
      steps {
        contrastVerification profile: 'your-contrast-api-profile', count: 0, severity: 'High'
      }
    }
  }
    
  post {
    always {
      echo 'This will always run'
      emailext body:  "Build URL: ${BUILD_URL}",
        subject: "$currentBuild.currentResult-$JOB_NAME",
        to: 'emailAddressGoesHere@optum.com'
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}
