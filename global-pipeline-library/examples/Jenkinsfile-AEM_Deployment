def RELEASE_VERSION = "1.0"
def BUILD_VERSION = currentBuild.number

//AEM package id
def ARTIFACT_ID="eg-ExampleComponent"

//AEM package group
def ARTIFACT_GROUP="example"

//Dev
def DEV_AUTHOR="http://author-example-dev.ocp-ctc-dmz-nonprod.optum.com"
def DEV_PUBLISH="http://publish-example-dev.ocp-ctc-dmz-nonprod.optum.com"

//QA
def QA_AUTHOR="http://author-example-qa.ocp-ctc-dmz-nonprod.optum.com"
def QA_PUBLISH="http://publish-example-qa.ocp-ctc-dmz-nonprod.optum.com"

//Set build retention to 10
properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10'))]) 

//Set display name of build
currentBuild.displayName = RELEASE_VERSION+"."+BUILD_VERSION

pipeline {
    agent none

    stages {

        //Build & Deploy to Dev using same executor
        stage("Checkout Code") {
            agent {label "docker-maven-slave"}
            stages{
                stage("Build") {
                    steps {
                        //Update the version, build, and deploy to artifactory
                        configFileProvider([configFile(fileId: 'omcapp-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                            glMavenBuild mavenGoals: "versions:set -DnewVersion=${RELEASE_VERSION}.${BUILD_VERSION} ; mvn -s ${MAVEN_SETTINGS} clean deploy",
                                        runJacocoCoverage:false,
                                        uploadUnitTestResults:false,
                                        uploadJacocoResults:false
                        }

                        //Stash the artifact for later stages, this is to avoid having to rebuild the code later in the pipeline
                        stash includes: 'ui/target/*.zip', name: 'artifact'

                        //Save the artifact with the job
                        archiveArtifacts 'ui/target/**.zip, ui/target/**.jar'
                    }
                }

                stage("Deploy To DEV Author") {
                    steps {
                        //Uninstall and delete any previous version of the artifact
                        glAemUninstallPackage credentialsId: "magic",
                                              artifactId: "$ARTIFACT_ID",
                                              artifactGroup: "$ARTIFACT_GROUP",
                                              envUrl: "$DEV_AUTHOR",
                                              deleteArtifact: true

                        //Install artifact from maven build
                        glAemInstallPackage credentialsId: "magic",
                                            artifactId: "$ARTIFACT_ID",
                                            artifactGroup: "$ARTIFACT_GROUP",
                                            artifactVersion: "$RELEASE_VERSION.$BUILD_VERSION",
                                            envUrl: "$DEV_AUTHOR"
                        }
                }

                stage("Deploy To DEV Publish"){
                    steps {
                        //Uninstall and delete any previous version of the artifact
                        glAemUninstallPackage credentialsId: "magic",
                                              artifactId: "$ARTIFACT_ID",
                                              artifactGroup: "$ARTIFACT_GROUP",
                                              envUrl: "$DEV_PUBLISH",
                                              deleteArtifact: true

                        //Install artifact from maven build
                        glAemInstallPackage credentialsId: "magic",
                                            artifactId: "$ARTIFACT_ID",
                                            artifactGroup: "$ARTIFACT_GROUP",
                                            artifactVersion: "$RELEASE_VERSION.$BUILD_VERSION",
                                            envUrl: "$DEV_PUBLISH"
                    }
                }
            }
        }

        stage("Approve QA Deployment") {
            agent {label "docker-maven-slave"}
            
            //Manual approval step before deploying to higher environment
            input {
                message "Deploy To QA?"
                ok "Approved"
            }

            //Dont need to checkout code again since we stashed the build artifact in the first stage
            options {skipDefaultCheckout true}

            stages{
                stage("Deploy To QA Author") {
                    steps {
                        unstash 'artifact'

                        //Uninstall and delete any previous version of the artifact
                        glAemUninstallPackage credentialsId: "magic",
                                            artifactId: "$ARTIFACT_ID",
                                            artifactGroup: "$ARTIFACT_GROUP",
                                            envUrl: "$DEV_AUTHOR",
                                            deleteArtifact: true

                        //Install artifact from maven build
                        glAemInstallPackage credentialsId: "magic",
                                            artifactId: "$ARTIFACT_ID",
                                            artifactGroup: "$ARTIFACT_GROUP",
                                            artifactVersion: "$RELEASE_VERSION.$BUILD_VERSION",
                                            envUrl: "$DEV_AUTHOR"
                    }
                }

                stage("Deploy To QA Publish"){
                    steps {
                        unstash 'artifact'

                        //Uninstall and delete any previous version of the artifact
                        glAemUninstallPackage credentialsId: "magic",
                                              artifactId: "$ARTIFACT_ID",
                                              artifactGroup: "$ARTIFACT_GROUP",
                                              envUrl: "$DEV_PUBLISH",
                                              deleteArtifact: true

                        //Install artifact from maven build
                        glAemInstallPackage credentialsId: "magic",
                                            artifactId: "$ARTIFACT_ID",
                                            artifactGroup: "$ARTIFACT_GROUP",
                                            artifactVersion: "$RELEASE_VERSION.$BUILD_VERSION",
                                            envUrl: "$DEV_PUBLISH"
                    }
                }
            }
        }
    }
}