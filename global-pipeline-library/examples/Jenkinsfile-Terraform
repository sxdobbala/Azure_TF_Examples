@Library('com.optum.jenkins.pipeline.library@master') _

pipeline {
  agent {
    label 'docker-terraform-slave' // your docker template needs to have the terraform mixin, as well as aws-cli or azure-cli
  }

  environment { }

  stages {
    stage ('Cloud provider configuration') {
      steps {
        // azure login uses two-factor authentication, so no need to pass credentials
        // aws login requires credentials and region to be passed
        glCloudConfig cloudProvider:"azure" // azure
        // glCloudConfig credentialsId:'terraform', cloudProvider:"aws", region:"us-east-2" // aws login
      }
    }

    stage ('Stand up') {
      steps {
        glTerraformInit reconfigure:true // example of setting a flag that has been defined
        glTerraformPlan([:]) // example if you do not want to pass any flags
        glTerraformApply additionalFlags:['parallelism':'1'] // example of passing any flags that are not already defined
      }
    }

    stage ('Tear down') {
      steps {
        glTerraformDestroy([:])
      }
    }
  }
  post {
    always {
      echo 'This will always run'
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}