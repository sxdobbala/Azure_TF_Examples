#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _

// This is an example Jenkinfile where we build and then execute a Sonar Scan
// and auto-versioning for artifact based on git tag
// The Jenkins Global Pipeline Library that is being used is: https://github.optum.com/jenkins-pipelines/global-pipeline-library

pipeline {
  agent {
    label 'docker-maven-slave'
  }
  environment {
    GIT_CREDENTIALS_ID = 'sonar_tech'
    TECH_USER ='devopseng_tech'
    GIT_TAG_PREFIX = 'v'
    LAST_RELEASE_VERSION = glVersionsGetLatestSemanticVersionFromTag gitTagPrefix : "${env.GIT_TAG_PREFIX}"
    NEXT_VERSION = glVersionsBump version : "${env.LAST_RELEASE_VERSION}", patchLevel: 'patch'
  }

  stages {
    stage ('update github status to pending') {
      steps {
        glGithubStatus credentialsId: "${env.GIT_CREDENTIALS_ID}",
                       description: "my custom description ",
                       context: 'jenkins/customStatus'
      }
    }
    stage ('Build') {
      when { not { buildingTag() } }
      steps {
        glMavenBuild additionalProps:['ci.env':''], newVersion:"${env.NEXT_VERSION}-SNAPSHOT" // ci.env needed if using UHG parent pom
      }
    }
    stage('Sonar') {
      steps {
        glSonarMavenScan gitUserCredentialsId:"${env.GIT_CREDENTIALS_ID}"
      }
    }
    //this is a conditional stage that's only executed when a new tag or github release is created
    //to have this automatically executed, the github webhook needs to have proper events 'Branch or tag creation' or 'Releases'
    //jenkins (multibranch/org) pipeline will also need to be configured with 'Discover tags'
    //and build strategies will have to be specified 'Tags' and 'Regular Branches' (and 'Change Requests' if a PR build is needed)
    stage ('Release') {
      when {
        tag pattern: "^${env.GIT_TAG_PREFIX}(\\d+)\\.(\\d+)\\.(\\d+)\$", comparator: "REGEXP" 
      }
      steps {
        //derive the new version from new tag and build without '-SNAPSHOT' version qualifier to have maven publish this into UHG-Releases repository
        glMavenBuild additionalProps:['ci.env':''], newVersion:("${env.TAG_NAME}".replace("${env.GIT_TAG_PREFIX}", ""))
      }
    }
    stage('Artifactory') {
      steps {
        glMavenArtifactoryDeploy artifactoryUserCredentialsId:"${env.TECH_USER}"
      }
    }
  }
  post {
    always {
      echo 'This will always run'
      emailext body:  "Build URL: ${BUILD_URL}",
        subject: "$currentBuild.currentResult-$JOB_NAME",
        to: 'emailAddressGoesHere@optum.com'

      glGithubStatus credentialsId: "${env.GIT_CREDENTIALS_ID}",
                     description: "my custom description ",
                     context: 'jenkins/customStatus',
                     status: "${currentBuild.currentResult}"
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}

