#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _

// This is an example Jenkinfile where we 
//   1. build and package jboss war
//   2. publish package to Artifactory
//   3. import package to XL Deploy
//   4. and deploy to DEV environment with XL Deploy

def PIPELINE_VERSION = new Date().format('yyyy.MM.dd') + "-${BUILD_NUMBER}"

// Artifactory Vars
def ARTIFACTORY_CREDID    = "f398c746-821e-4fce-9ea0-785101c145a4"
def ARTIFACTORY_BASE_URL  = "https://repo1.uhc.com/artifactory"
def ARTIFACTORY_REPO      = "UHG-Releases"
def ARTIFACTORY_GROUPID   = "com/optum/xld"

// XL Deploy Vars
def XLD_WORKSPACE       = "cdeSuite"
def XLD_APP_NAME        = "microemr-cde"
def XLD_APP_VERSION     = "${PIPELINE_VERSION}"
def XLD_DEPLOYABLE_TYPE = "jbossdm.War"
def XLD_DEPLOYABLE_NAME = "microemr"
def XLD_DEPLOYABLE_TAGS = ["microemr","ghg"]
def XLD_DEPLOYABLE_URL  = "${ARTIFACTORY_BASE_URL}/${ARTIFACTORY_REPO}/${ARTIFACTORY_GROUPID}/cdeSuite/microemr/${PIPELINE_VERSION}/microemr-${PIPELINE_VERSION}.war"
def JENKINS_CRED_XLD    = "2f95ed19-e6f3-4c78-b9d6-95113959df3f"
def XLD_ENV_ID          = "Environments/${XLD_WORKSPACE}/DEV"
def XLD_PKG_ID          = "Applications/${XLD_WORKSPACE}/${XLD_APP_NAME}/${PIPELINE_VERSION}"

pipeline
{
  agent
  {
    label 'docker-maven-slave'
  }
  stages
  {
    stage ('SET_DISPLAYNAME') // This step is cosmetic
    {
      steps
      {
        echo "PIPELINE_VERSION: ${PIPELINE_VERSION}"
        script
        {
          currentBuild.displayName = "${PIPELINE_VERSION}"
        }
      }
    }
    stage ('Build_Package')  // Build my package
    {
      steps
      {
        glMavenBuild(mavenGoals:'clean package','newVersion':"$PIPELINE_VERSION", additionalProps:['ci.env':'', 'snapshotDependencyAllowed':'false'])
      }
    }
    stage ('Artifactory')  // Now upload package to Artifactory
    {
      steps
      {
        glMavenArtifactoryDeploy(artifactoryUserCredentialsId:"${ARTIFACTORY_CREDID}")
      }
    }
    stage('XLDeploy_ImportPackage')
    {
      steps
      {
        script
        {
        echo "Step 1.  Create XL Deploy package manifest XML"
        String manifestXML = glXLDeployGenerateManifestXML('xldWorkspace':XLD_WORKSPACE,'xldAppName':XLD_APP_NAME,'xldAppVersion':XLD_APP_VERSION)
        echo "Step 2.  Add deployable to manifest XML. Repeat this for each deployable"
        manifestXML = glXLDeployAddDeployable('xldManifestXML':manifestXML,'xldType':XLD_DEPLOYABLE_TYPE,'xldName':XLD_DEPLOYABLE_NAME,'fileUri':XLD_DEPLOYABLE_URL,'tags':XLD_DEPLOYABLE_TAGS)
        echo "Step 3.  Now import package to XL Deploy"
        glXLDeployPackageImport('xldManifestXML':manifestXML, 'xldServerLabel':"Production", 'xldCredentialID':"${JENKINS_CRED_XLD}")
        }
      }
    }
    stage('XLDeploy_Deploy')
    {
      when { branch 'release' }
      steps
      {
        script
        {
        glXLDeployPackageDeploy 'xldServerLabel':"Production", 'xldEnvironmentID':"${XLD_ENV_ID}", 'xldPackageID':"${XLD_PKG_ID}", 'xldCredentialID':"${JENKINS_CRED_XLD}"
        }
      }
    }
   }
  post
    {
    always
    {
      echo 'This will always run'
      emailext body: "Build URL: ${BUILD_URL}",
      subject: "$currentBuild.currentResult-$JOB_NAME",
      to: 'nobody@optum.com'
    }
    success
    {
      echo 'This will run only if successful'
    }
    failure
    {
      echo 'This will run only if failed'
    }
    unstable
    {
      echo 'This will run only if the run was marked as unstable'
    }
    changed
    {
      echo 'This will run only if the state of the Pipeline has changed'
    }
  }
}
