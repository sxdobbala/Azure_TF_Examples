#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _
import com.optum.jenkins.pipeline.library.scm.Git
import com.optum.jenkins.pipeline.library.sonar.Sonar

// This is an example Jenkinfile to execute a Sonar Scan using the 'SonarQube Scanner for Jenkins' plugin.
// The preferred method to run a Sonar scan is with Maven or Gradle. However, the scanner plugin may come in handy for
// projects that do not use one of these modern build systems.
// The Jenkins Global Pipeline Library that is being used is: https://github.optum.com/jenkins-pipelines/global-pipeline-library
// The plugin being used is: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins
// The plugin must be installed and configured in Jenkins. You need to follow both the Installation and Global
// Configuration steps here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins

pipeline {
  agent {
    label 'java'
  }
  environment {
    GIT_CREDENTIALS_ID = 'sonar_tech'
  }

  stages {
    stage ('Build') {
      steps {
        // This is up to you to implement, since you're not using Maven or Gradle.
        // Sonar works best if the code is built and any unit and integration tests are run with coverage..
      }
    }
    stage('Sonar') {
      steps {
        glSonarScan sources:"src",
                    sonarTool:"SonarQube",
                    sonarServer:"SonarQubeServer", //Name of Sonar Server instance configured in jenkins.
                    additionalProps:['sonar.java.binaries':'bin'],
                    gitUserCredentialsId:"${env.GIT_CREDENTIALS_ID}"
      }
    }
  }
  post {
    always {
      echo 'This will always run'
      emailext body:  "Build URL: ${BUILD_URL}",
        subject: "$currentBuild.currentResult-$JOB_NAME",
        to: 'emailAddressGoesHere@optum.com'
    }
    success {
      echo 'This will run only if successful'
    }
    failure {
      echo 'This will run only if failed'
    }
    unstable {
      echo 'This will run only if the run was marked as unstable'
    }
    changed {
      echo 'This will run only if the state of the Pipeline has changed'
      echo 'For example, if the Pipeline was previously failing but is now successful'
    }
  }
}

