#!/usr/bin/env groovy

@Library("com.optum.jenkins.pipeline.library@master") _

String getRepoName() {
  return "$GIT_URL".tokenize('/')[3].split("\\.")[0]
}

String getRepoOwnerName() {
  return "$GIT_URL".tokenize('/')[2].split("\\.")[0]
}

pipeline {
  agent none
  environment {
    JAVA_VERSION = '1.8.0'
    GRADLE_VERSION = '4.10.2'
    proceed = true
  }
  stages {
    stage('Compile/Unit Tests') {
      agent {
        label 'docker-gradle-slave'
      }
      steps {
        command 'gradle test'
        script { releaseConductors = "rramasay,estarr,mmaday,rseibe1,${getRepoOwnerName()}" } // Only the following MSIDs can submit make a release approval
        stash includes: 'build/test-results/test/*.xml', name: 'testresults'
        archiveArtifacts 'build/test-results/test/*.xml'
      }
    }
    stage('Build Docs') {
      agent {
        label 'docker-gradle-slave'
      }
      steps {
        checkout scm
        command "groovydoc -d ./docs -doctitle \"Jenkins Pipeline as Code (JPaC) Public Methods\" -stylesheetfile groovy_stylesheet.css -overview groovy_overview.html -footer \"(c) Optum Technology 2018. Optum JPaC Team\" vars/*groovy"
        archiveArtifacts 'docs/**/*'

        script {
          if (env.BRANCH_NAME == 'master') {
            echo "Commit Docs for master branch"
            withCredentials([usernamePassword( credentialsId: 'svc_jpac',
                                               passwordVariable: 'GIT_PASSWORD',
                                               usernameVariable: 'GIT_USERNAME')]) {
              String urlWithCreds = env.GIT_URL.replaceFirst(/https\:\/\//, "https://$GIT_USERNAME:$GIT_PASSWORD@")
              command """
                git config --global user.email jenkins@noreply-optum.com
                git config --global user.name jenkins
                git add docs/*
                git commit -m 'updating docs for build tag $BUILD_TAG'
                git tag -a $BUILD_TAG -m "Build $BUILD_TAG"
                git fetch --all
                git subtree split --prefix docs -b gh-pages
                git push -f $urlWithCreds gh-pages:gh-pages
                git branch -D gh-pages
              """
            }
          }
        }
      }
    }
    stage('Sonar Scan') {
      agent {
        label 'docker-gradle-slave'
      }
      steps {
        script {
          try {
            glSonarScan productName: "jenkins-pipelines",
              gitUserCredentialsId: "jpac_github_token",
              scmRepoUrl: "https://github.optum.com/jenkins-pipelines/global-pipeline-library.git",
              sonarServer: "sonar.optum",
              sources: "src,vars",
              additionalProps:['sonar.github.disableInlineComments':'true']
          }
          catch (err) {
            echo "Sonar scan failed: " + err
          }
        }
      }
    }
    stage('Gather Release Parameters') {
      agent none
      when {    // only draft a release on master branch
        branch 'master'
      }
      steps {
        script {
          try {
            proceed = true
            timeout(time: 1, unit: 'DAYS') {                // timeout waiting for input after 1 day
              // capture the release parameters details in releaseMap, not yet able to use glApproval method for passing parameters
              releaseMap = input id: 'release',
                                 message: 'Input Release Parameters',
                                 ok: 'Proceed for release?',
                                 parameters: [   // Take 3 input parameters
                                   string(defaultValue: '', description: 'Enter github tag for the release', name: 'ReleaseTag'),
                                   string(defaultValue: '', description: 'Ex:Enhancements and bug fixes', name: 'ReleaseName'),
                                   string(defaultValue: '', description: 'Credentiald should already exists in Jenkins and mapped to ' +
                                     'username/password with password being the github token.', name: 'GithubCredentialId')
                                 ],
                                 submitter: releaseConductors,
                                 submitterParameter: 'APPROVER'                 // Record the approver msid
            }
          } catch (err) {    // If not approved or timeout, catch the error and continue but not proceed to cut a release
            echo err.toString()
            proceed = false
          }
        }
      }
    }
    stage('Release') {
      agent {
        label 'docker-gradle-slave'
      }
      when {   // only draft a release on master branch
        branch 'master'
      }
      steps {
        script {
          echo "Proceed with release: ${proceed}"
          if (proceed) {
            echo "APPROVER: ${releaseMap['APPROVER']}"
            echo "ReleaseTag: ${releaseMap['ReleaseTag']}"
            echo "ReleaseName: ${releaseMap['ReleaseName']}"
            echo "GithubCredentialId: ${releaseMap['GithubCredentialId']}"
            withCredentials([usernamePassword( credentialsId: "${releaseMap['GithubCredentialId']}",
                                               usernameVariable: 'githubusername',
                                               passwordVariable: 'githubtoken')]) {
              glGithubRelease token: "${githubtoken}",
                              repositoryName: "${getRepoOwnerName()}/${getRepoName()}",
                              tagName: "${releaseMap['ReleaseTag']}",
                              draft: true,
                              commitish: "master",
                              releaseName: "${releaseMap['ReleaseName']}",
                              githubUsername: "${githubusername}"
            }
          }
        }
      }
    }
  }
  post {
    always {
      node('docker-gradle-slave') {
        unstash 'testresults'
        junit "build/test-results/test/*.xml"
      }
    }
  }
}
