def REPO_URL = '@@REPO_URL@@'
def ADMIN_CRED_ID = '@@ADMIN_CRED_ID@@'
//def REPO_BRANCH = env.TARGET_BRANCH
def REPO_BRANCH = '@@REPO_BRANCH@@'
def ARTIFACTORY_URL = '@@ARTIFACTORY_URL@@'
def ARTIFACTS_NAME = "artifacts.${env.BUILD_NUMBER}"
def COMMIT_HASH
def ADMIN_AUTH_TOKEN = '@@ADMIN_AUTH_TOKEN@@'
def SNAPSHOT_REPO = '@@SNAPSHOT_REPO@@'

node('docker-maven-slave') {
    sh '''
        . /etc/profile.d/jenkins.sh
        echo $MAVEN_HOME > m2home.txt
        echo $JAVA_HOME > javahome.txt
    '''

// Set variables needed by Artifactory maven build
    env.MAVEN_HOME = readFile('m2home.txt').trim()
    env.JAVA_HOME = readFile('javahome.txt').trim()

// Define Artifactory Parameters
    def artifactoryServer = Artifactory.newServer url: ARTIFACTORY_URL, credentialsId: ADMIN_CRED_ID
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo = Artifactory.newBuildInfo()

    stage('Build') {
        git branch: REPO_BRANCH, credentialsId: ADMIN_CRED_ID, url: REPO_URL

        sh 'git rev-parse HEAD > commit'
        COMMIT_HASH = readFile('commit').trim()
        echo 'commit hash: ' + COMMIT_HASH
        rtMaven.deployer snapshotRepo: SNAPSHOT_REPO, server: artifactoryServer

        rtMaven.run pom: 'pom.xml', goals: '-U clean package -DskipTests', buildInfo: buildInfo

        stash includes: '**', name: ARTIFACTS_NAME
    }


    stage('Unit Tests') {
        unstash name: ARTIFACTS_NAME

        withCredentials([[$class: 'FileBinding', credentialsId: 'application-secrets', variable: 'APPLICATION_SECRETS']]) {
            def secretsFile = readFile(env.APPLICATION_SECRETS).trim().tokenize("\n")
            withEnv(secretsFile){

                rtMaven.deployer snapshotRepo: SNAPSHOT_REPO, server: artifactoryServer

                rtMaven.run pom: 'pom.xml', goals: 'install'
            }
        }


        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
    }

    stage('Publish Artifact to Artifactory') {

        artifactoryServer.publishBuildInfo buildInfo
    }
}

node('docker-oc-slave') {
    stage('Build Image on OCP') {
        unstash name: ARTIFACTS_NAME

        env.OCP_SERVER = '@@OCP_PROTOCOL@@://@@OCP_SERVER@@'
        env.OCP_PROJECT = '@@OCP_PROJECT@@'
        env.OCP_APP = '@@OCP_APP@@'
        env.JAR_PATH = '@@ARTIFACTS_PATH@@'

        echo 'Make deployments directory, copy in artifacts, and starting OCP Binary Build'
        withCredentials([[$class          : 'UsernamePasswordMultiBinding', credentialsId: ADMIN_CRED_ID,
                          usernameVariable: 'OC_USER', passwordVariable: 'OC_PASS']]) {
            sh '''
                . /etc/profile.d/jenkins.sh
                [ -z $JAR_PATH ] && JAR_PATH='target'
                EXTENSIONS=(jar war ear)
                mkdir -p ./ocp/deployments/
                if [ -d $JAR_PATH ]; then
                    for i in ${EXTENSIONS[@]}; do
                        if [ -f ./$JAR_PATH/*.$i ]; then
                            cp ./$JAR_PATH/*.$i ./ocp/deployments
                        fi
                    done
                elif [ -f $JAR_PATH ]; then
                    cp ./$JAR_PATH ./ocp/deployments/
                fi

                if [ -f .s2i/bin/assemble.sh ]; then
                    mkdir -p ./ocp/.s2i/bin
                    mv .s2i/bin/assemble.sh ./ocp/.s2i/bin/assemble
                    mv .s2i/bin/*.sh ./ocp/.s2i/bin/
                fi

                cd ./ocp
                oc login $OCP_SERVER -u ${OC_USER} -p ${OC_PASS} --insecure-skip-tls-verify=true
                oc project $OCP_PROJECT
                oc start-build $OCP_APP --from-dir=. --follow=true
            '''
        }
    }

//    input 'Go to next step?'
//
//    stage 'Deploy To Dev'
//
//    openshiftDeploy apiURL: env.OCP_SERVER,
//            authToken: ADMIN_AUTH_TOKEN,
//            depCfg: env.OCP_APP,
//            namespace: env.OCP_PROJECT,
//            verbose: 'false'

}

node('docker-maven-slave') {
    sh '''
        . /etc/profile.d/jenkins.sh
        echo $MAVEN_HOME > m2home.txt
        echo $JAVA_HOME > javahome.txt
    '''

// Set variables needed by Artifactory maven build
    env.MAVEN_HOME = readFile('m2home.txt').trim()
    env.JAVA_HOME = readFile('javahome.txt').trim()

// Define Artifactory Parameters
    def artifactoryServer = Artifactory.newServer url: ARTIFACTORY_URL, credentialsId: ADMIN_CRED_ID
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo = Artifactory.newBuildInfo()

    stage('Integration Tests'){
        env.SERVICE_HOST = '@@OCP_PROTOCOL@@://@@OCP_APP@@-@@OCP_PROJECT@@.@@OCP_SERVER@@'

        unstash name: ARTIFACTS_NAME

        rtMaven.run pom: '@@INTEGRATION_TEST_FOLDER@@/pom.xml', goals: 'test'
    }
}